From 0eba4a845cbd7ea96b6fdb0f8cd0cc26b737307f Mon Sep 17 00:00:00 2001
From: David Kaufmann <astra@fsinf.at>
Date: Sun, 4 Sep 2011 07:33:27 +0200
Subject: [PATCH] RestAuth authentication for Gitorious implemented

---
 app/models/user.rb          |   14 +++++++-------
 config/gitorious.sample.yml |   19 +++++++++++++++++++
 2 files changed, 26 insertions(+), 7 deletions(-)

diff --git a/app/models/user.rb b/app/models/user.rb
index 0f968bc..237b17b 100644
--- a/app/models/user.rb
+++ b/app/models/user.rb
@@ -53,16 +53,12 @@ class User < ActiveRecord::Base
   # For new users we are a little more strict than for existing ones.
   USERNAME_FORMAT = /[a-z0-9\-_\.]+/i.freeze
   USERNAME_FORMAT_ON_CREATE = /[a-z0-9\-]+/.freeze
-  validates_presence_of     :login, :email,               :if => :password_required?
+  validates_presence_of     :login,                       :if => :password_required?
   validates_format_of       :login, :with => /^#{USERNAME_FORMAT_ON_CREATE}$/i, :on => :create
   validates_format_of       :login, :with => /^#{USERNAME_FORMAT}$/i, :on => :update
-  validates_format_of       :email, :with => Email::FORMAT
   validates_presence_of     :password,                   :if => :password_required?
   validates_presence_of     :password_confirmation,      :if => :password_required?
-  validates_length_of       :password, :within => 4..40, :if => :password_required?
   validates_confirmation_of :password,                   :if => :password_required?
-  validates_length_of       :login,    :within => 3..40
-  validates_length_of       :email,    :within => 3..100
   validates_uniqueness_of   :login, :email, :case_sensitive => false
   validates_acceptance_of :terms_of_use, :on => :create, :allow_nil => false
   validates_format_of     :avatar_file_name, :with => /\.(jpe?g|gif|png|bmp|svg|ico)$/i, :allow_blank => true
@@ -142,8 +138,12 @@ class User < ActiveRecord::Base
 
   # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
   def self.authenticate(email, password)
-    u = find :first, :conditions => ['email = ? and activated_at IS NOT NULL and suspended_at IS NULL', email] # need to get the salt
-    u && u.authenticated?(password) ? u : nil
+    GitoriousConfig['authentication'].each do |config|
+        authentication = Gitorious::Authentication.const_get(config['method']).new config
+        u = authentication.authenticate email, password
+        return u if u && u.activated_at && ! u.suspended_at
+    end
+    nil
   end
 
   # Encrypts some data with the salt.
diff --git a/config/gitorious.sample.yml b/config/gitorious.sample.yml
index d7885d4..72cc79b 100644
--- a/config/gitorious.sample.yml
+++ b/config/gitorious.sample.yml
@@ -66,6 +66,25 @@ test:
   # Pick a default license
   #default_license: GNU Affero General Public License (AGPLv3)
 
+  # Configure authentication (Default, RestAuth, etc).
+  # Multiple authentication methods can be specified in list form.
+  # Each method will be attempted in the order listed.
+  # Example RestAuth authentication definition
+  #
+  #authentication:
+  #  - method: Restauth
+  #    host: localhost
+  #    port: 8000
+  #    use_ssl: true
+  #    verify_ssl: true
+  #    autoregistration: true
+  #    service_username: username
+  #    service_password: password
+  #    fullname_attribute: gitorious_fullname
+  #    email_attribute: gitorious_email
+  authentication:
+    - method: Default
+
   # Terms of service and privacy policy
   terms_of_use: false
   terms_of_service_url: http://en.gitorious.org/tos
-- 
1.7.6.1

